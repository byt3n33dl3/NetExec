@attribute [Authorize]
@page "/payloads"

@inject SharpC2Api Api
@inject IFileSaver FileSaver
@inject IDialogService Dialogs

@using Client.Models.Handlers
@using Client.Components.Handlers
@using CommunityToolkit.Maui.Storage

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    
    <MudStack>
        
        <MudSelect T="Handler" Label="Handler" Variant="Variant.Outlined" @bind-Value="@_selectedHandler">
            @foreach (var handler in _handlers)
            {
                <MudSelectItem T="Handler" Value="@handler"/>
            }
        </MudSelect>

        <MudSelect T="string" Label="Format" Variant="Variant.Outlined" @bind-Value="@_selectedFormat">
            @foreach (var format in _formats)
            {
                <MudSelectItem T="string" Value="@format.Key"/>
            }
        </MudSelect>

        <MudButton Variant="Variant.Filled" OnClick="Download">Download</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="Host">Host</MudButton>
        
    </MudStack>
    
</MudContainer>

@code {

    private readonly List<Handler> _handlers = new();
    private readonly Dictionary<string, int> _formats = new()
    {
        { "EXE", 0 },
        { "DLL", 1 },
        { "SVC_EXE", 2 },
        { "POWERSHELL", 3 },
        { "SHELLCODE", 4 }
    };

    private Handler _selectedHandler;
    private string _selectedFormat;

    protected override async Task OnInitializedAsync()
    {
        var http = await Api.GetHttpHandlers();
        _handlers.AddRange(http);

        var smb = await Api.GetSmbHandlers();
        _handlers.AddRange(smb);

        var tcp = await Api.GetTcpHandlers();
        _handlers.AddRange(tcp);
    }

    private async Task Download()
    {
        await using var ms = await Api.GeneratePayload(_selectedHandler, _formats[_selectedFormat]);
        
        // clicking "cancel" throws an exception
        try
        {
            var path = await FileSaver.SaveAsync(FileName, ms, CancellationToken.None);

            var options = new DialogOptions { NoHeader = false };
            await Dialogs.ShowMessageBox("Success",
                $"Saved to {path}",
                "OK", null, null, options);
        }
        catch (FileSaveException)
        {
            // ignore
        }
    }

    private async Task Host()
    {
        await using var response = await Api.GeneratePayload(_selectedHandler, _formats[_selectedFormat]);
        await using var ms = new MemoryStream();
        await response.CopyToAsync(ms);

        var payload = ms.ToArray();
        
        var parameters = new DialogParameters
        {
            { "FileContent", payload },
            { "FileName", FileName }
        };
        
        var options = new DialogOptions { FullWidth = true };
        var dialogue = await Dialogs.ShowAsync<HostAFile>("", parameters, options);
        var result = await dialogue.Result;

        if (!result.Cancelled)
        {
            options = new DialogOptions { NoHeader = false };
            await Dialogs.ShowMessageBox("Success",
                $"Hosted {FileName}",
                "OK", null, null, options);
        }
    }

    private string FileName
    {
        get
        {
            var fileName = $"drone_{_selectedHandler.Name}";

            switch (_selectedFormat)
            {
                case "EXE":
                    fileName += ".exe";
                    break;
                
                case "DLL":
                    fileName += ".dll";
                    break;
                
                case "SVC_EXE":
                    fileName += ".exe";
                    break;
                
                case "POWERSHELL":
                    fileName += ".ps1";
                    break;
                
                case "SHELLCODE":
                    fileName += ".bin";
                    break;
            }

            return fileName;
        }
    }
}