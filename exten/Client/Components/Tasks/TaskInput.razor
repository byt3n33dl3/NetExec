@inject SharpC2Api Api

@using Client.Models
@using Client.Models.Handlers
@using SharpC2.API.Requests;

<MudDialog>
    <DialogContent>
        @if (Command is not null)
        {
            <MudGrid>
                <MudItem xs="12">
                    <div class="d-flex">
                        <MudText Typo="Typo.overline">Alias:</MudText>
                        <MudText Typo="Typo.overline" Class="pl-2">@Command.Alias</MudText>
                    </div>
                    <div class="d-flex">
                        <MudText Typo="Typo.overline">Description:</MudText>
                        <MudText Typo="Typo.overline" Class="pl-2">@Command.Description</MudText>
                    </div>
                    <div class="d-flex">
                        <MudText Typo="Typo.overline">OPSEC:</MudText>
                        <MudText Typo="Typo.overline" Class="pl-2">@Command.OpSec</MudText>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <MudForm @ref="_form" @bind-IsValid="@_success">
                        @foreach (var argument in Command.Arguments)
                        {
                            switch (argument.Type)
                            {
                                case ArgumentType.STRING:
                                {
                                    <MudTextField T="string" Label="@argument.Key" Required="@(!argument.Optional)"
                                                  RequiredError="Argument is required" ValueChanged="@(value => ArgumentCallback(argument.Key, value))"
                                                  Immediate="@true" />
                                    
                                    break;
                                }
                                case ArgumentType.ARTEFACT:
                                {
                                    <MudGrid>
                                        <MudItem xs="4">
                                            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                                                <ButtonTemplate>
                                                    <MudButton HtmlTag="label"
                                                               Variant="Variant.Filled"
                                                               Color="Color.Primary"
                                                               StartIcon="@Icons.Filled.CloudUpload"
                                                               for="@context">
                                                        Select Artefact
                                                    </MudButton>
                                                </ButtonTemplate>
                                            </MudFileUpload>
                                        </MudItem>
                                        <MudItem xs="4">
                                            @if (_taskRequest.Artefact is not null)
                                            {
                                                <div class="d-flex">
                                                    <MudText Typo="Typo.overline" Class="pl-2">Artefact:</MudText>
                                                    <MudText Typo="Typo.overline" Class="pl-2">@_taskRequest.ArtefactPath</MudText>
                                                </div>
                                                <div class="d-flex">
                                                    <MudText Typo="Typo.overline" Class="pl-2">Size:</MudText>
                                                    <MudText Typo="Typo.overline" Class="pl-2">@_taskRequest.Artefact.Length bytes</MudText>
                                                </div>
                                            }
                                        </MudItem>
                                    </MudGrid>
                                    
                                    break;
                                }
                                case ArgumentType.HANDLER:
                                {
                                    <MudSelect T="Handler" Label="Select Handler" Variant="Variant.Outlined" Dense="@true"
                                               Required="@(!argument.Optional)" ValueChanged="HandlerCallback">
                                        @foreach (var handler in _handlers)
                                        {
                                            <MudSelectItem Value="@handler" />
                                        }
                                    </MudSelect>
                                    
                                    break;
                                }

                                case ArgumentType.SELECTION:
                                {
                                    <MudSelect T="string" Label="@argument.Key" Variant="Variant.Outlined" Dense="@true"
                                              Required="@(!argument.Optional)" ValueChanged="@(value => SelectionCallback(argument.Key, value))" >
                                        @foreach (var option in argument.Options)
                                        {
                                            <MudSelectItem Value="@option"/>
                                        }
                                    </MudSelect>

                                    break;
                                }

                                default:
                                    throw new ArgumentOutOfRangeException();
                            }
                        }
                    </MudForm>
                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string DroneId { get; set; }

    [Parameter]
    public DroneCommand Command { get; set; }

    private MudForm _form;
    private bool _success;
    
    private TaskRequest _taskRequest;
    private readonly List<Handler> _handlers = new();

    protected override async Task OnParametersSetAsync()
    {
        // create new task request
        _taskRequest = new TaskRequest
        {
            Alias = Command.Alias,
            Command = Command.Command,
            ResultType = Command.Output,
            Arguments = new Dictionary<string, string>()
        };
        
        // load handlers if needed
        if (Command.Arguments.Any(a => a.Type == ArgumentType.HANDLER))
        {
            var handlers = await Api.GetHttpHandlers();
            _handlers.AddRange(handlers);

            await InvokeAsync(StateHasChanged);
        }
    }
    
    private void ArgumentCallback(string key, string value)
    {
        if (!_taskRequest.Arguments.TryAdd(key, value))
            _taskRequest.Arguments[key] = value;
        
        // if the value is null, remove it from the dict
        if (string.IsNullOrWhiteSpace(_taskRequest.Arguments[key]))
            _taskRequest.Arguments.Remove(key);
    }
    
    private void HandlerCallback(Handler handler)
    {
        if (handler is null)
            return;
        
        if (!_taskRequest.Arguments.TryAdd("handler", handler.Name))
            _taskRequest.Arguments["handler"] = handler.Name;
    }
    
    private void SelectionCallback(string key, string value)
    {
        if (!_taskRequest.Arguments.TryAdd(key, value))
            _taskRequest.Arguments[key] = value;
        
    // if the value is null, remove it from the dict
        if (string.IsNullOrWhiteSpace(_taskRequest.Arguments[key]))
            _taskRequest.Arguments.Remove(key);
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        using var ms = new MemoryStream();
        await using var fs = file.OpenReadStream(5120000); // 5MB
        await fs.CopyToAsync(ms);
        
        _taskRequest.ArtefactPath = file.Name;
        _taskRequest.Artefact = ms.ToArray();
    }

    private async Task Submit()
    {
        // validate form
        await _form.Validate();
        if (!_form.IsValid) return;

        await Api.TaskDrone(DroneId, _taskRequest);

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel()
        => MudDialog.Cancel();
}